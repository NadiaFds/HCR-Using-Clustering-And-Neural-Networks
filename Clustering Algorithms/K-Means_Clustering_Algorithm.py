# -*- coding: utf-8 -*-
"""K-Means_Clustering_Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DSRWTNvkQzWBDRHtJ-IjZne36IMSCRP4
"""

!pip install opencv-python numpy matplotlib

import cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

# read the image
image = cv2.imread("Misc/A/1.jpg")
img1=Image.open("Misc/A/1.jpg")
#img1.show()
print('Original Image')
plt.imshow(img1)

# reshape the image to a 2D array of pixels and 3 color values (RGB)
pixel_values = image.reshape((-1, 3))
# convert to float
pixel_values = np.float32(pixel_values)

print(pixel_values.shape)

# define stopping criteria
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)

# number of clusters (K)
k = 2
_, labels, (centers) = cv2.kmeans(pixel_values, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

# convert back to 8 bit values
centers = np.uint8(centers)

# flatten the labels array
labels = labels.flatten()

# convert all pixels to the color of the centroids
segmented_image = centers[labels.flatten()]

# reshape back to the original image dimension
segmented_image = segmented_image.reshape(image.shape)
# show the image
print('After K-Means Clustering')
plt.imshow(segmented_image)
#plt.show()

plt.savefig('Misc/A/A_Kmeans/1.jpg')
